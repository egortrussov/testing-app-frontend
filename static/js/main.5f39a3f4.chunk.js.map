{"version":3,"sources":["landingPage/img/logo.svg","landingPage/img/hero.svg","context/TestsContext.js","landingPage/LandingPage.js","components/Navbar/Navbar.js","components/Spinner/Spinner.js","middleware/authMiddleware.js","middleware/dateFormat.js","components/reusableComponents/PointsCard.js","components/Profile/Profile.js","components/Tests/Tests.js","components/Tests/TestInfo.js","components/CreateTest/CreateTest.js","components/TestResult/TestResult.js","components/CreateTest/CreateTestForm.js","components/PassTest/PassTest.js","middleware/validator.js","components/Auth/Login.js","components/Auth/Register.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","createContext","tests","title","LandingPage","className","src","Logo","alt","to","Hero","Component","Navbar","state","isLoggedIn","this","context","logout","window","location","href","token","ls","get","console","log","exact","onClick","bind","contextType","TestsContext","Spinner","getHeaders","formatDate","date1","date","Date","day","getDate","monthIndex","getMonth","year","getFullYear","PointsCard","props","points","maxPoints","result","extraClassName","Profile","user","passedTests","isLoading","fetch","headers","then","res","json","isTokenError","reverse","setState","name","map","test","linkToTest","testId","key","_id","Tests","isRedirectToLogin","createdAt","subject","results","length","TestInfo","testResults","usernames","errors","match","params","field","document","querySelector","addEventListener","e","which","preventDefault","sort","res1","res2","currentAccessKey","target","innerText","accessKey","isProtected","description","htmlFor","id","contenteditable","onInput","setAccessKey","type","goToTest","userId","username","answers","CreateTest","createdTests","TestResult","resultId","questions","ans","inx","toString","isCorrect","correctAnswerId","parseInt","question","text","CreateTestForm","answerId","creator","quesId","len","push","index","quesIndex","ansId","method","body","JSON","stringify","i","getElementById","splice","letters","setTestTitle","setTestSubject","onChange","setTestDescription","cols","rows","setProtectedState","class","ques","deleteQuestion","setQuestionTitle","deleteAnswer","setCorrectAnswerId","checked","setAnswerText","handleAddAnswer","handleAddQuestion","handleAddTest","PassTest","answeredQuestions","query","now","onSubmit","finishTest","handleSelect","value","validate","data","forEach","trim","Login","email","password","formEl","createRef","psw","keyCode","getAttribute","innerHTML","success","setToken","doesUserExist","handleSubmit","data-name","setCredential","contentEditable","AuthContext","Register","confirmPassword","psw1","querySelectorAll","newUser","notSuccess","registerUser","MainPage","path","component","App","set","Fragment","Provider","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f39a3f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d86e2199.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.de877d3a.svg\";","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    tests: [{ title: 'hello' }]\r\n})\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Logo from './img/logo.svg'\r\nimport Hero from './img/hero.svg'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                {/* <div className=\"bg-circle-lg bg-circle\"></div> */}\r\n                <div className=\"bg-circle-md bg-circle\"></div>\r\n                <div className=\"bg-circle-dm bg-circle\"></div>\r\n                <div className=\"nav\">\r\n                    <div className=\"nav-left\">\r\n                        <img src={ Logo } alt=\"\" />\r\n                        <h1>EasyTest</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero\">\r\n                    <div className=\"hero-left\">\r\n                        <h1>Get your experience in online testing to a whole new level!</h1>\r\n                        <Link className=\"cta\" to=\"/app/\">Try it out!</Link>\r\n                    </div>\r\n                    <div className=\"hero-right\">\r\n                        <img src={ Hero } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    &copy; 2020 Yegor Trussov\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport ls from 'local-storage'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        isLoggedIn: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    // componentDidMount() {\r\n    //     let value = this.context;\r\n    //     console.log(value.token !== '');\r\n        \r\n    //     if (value.token !== '') {\r\n    //         this.setState({\r\n    //             isLoggedIn: true\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    logout() {\r\n        this.context.logout();\r\n        window.location.href = '/app/login'\r\n    }\r\n\r\n    render() {\r\n        const token = ls.get('token');\r\n        console.log(token);\r\n        \r\n        let isLoggedIn = token !== ''\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"nav-item nav-top\">\r\n                    <h2 className=\"logo\">EasyTest</h2>\r\n                </div>\r\n                <div className=\"nav-item nav-middle\">\r\n                    <NavLink exact className=\"nav-link\" to=\"/app/\"><i className=\"fas fa-home\"></i> Home</NavLink>\r\n                    <NavLink className=\"nav-link\" to=\"/app/allTests\"><i className=\"fas fa-align-left\"></i> Tests</NavLink>\r\n                    <NavLink className=\"nav-link\" to=\"/app/createTest\"><i className=\"fas fa-pen-alt\"></i> Create Test</NavLink>\r\n                </div>\r\n                <div className=\"nav-item nav-bottom\">\r\n                    { !isLoggedIn && (\r\n                        <>\r\n                            <NavLink className=\"nav-link\" to=\"/app/login\">Login</NavLink>\r\n                            <NavLink className=\"nav-link\" to=\"/app/register\">Register</NavLink>\r\n                        </>\r\n                    ) }\r\n                    { isLoggedIn && (\r\n                        <button className=\"nav-link\" onClick={ this.logout.bind(this) } >Logout</button>\r\n                    ) }                    \r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\n\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"loader-wrapper\">\r\n            <div className=\"loader\"></div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Spinner","import ls from 'local-storage'\r\n\r\nconst getHeaders = () => {\r\n    return {\r\n        'x-auth-token': ls.get('token')\r\n    }\r\n}\r\n\r\nexport {\r\n    getHeaders\r\n}","const formatDate = date1 => {\r\n    let date = new Date(date1);\r\n    let monthNames = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ];\r\n\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    return day + ' ' + monthNames[monthIndex] + ' ' + year;\r\n};\r\n\r\nexport {\r\n    formatDate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PointsCard extends Component {\r\n    render() {\r\n        const { points, maxPoints } = this.props;\r\n\r\n        let result = points / maxPoints;\r\n        let extraClassName = '';\r\n\r\n        if (result >= .85)\r\n            extraClassName = 'excellent';\r\n        else if (result >= .65)\r\n            extraClassName = 'good';\r\n        else if (result >= .40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `points-card ${ extraClassName }` }>\r\n                { points }<span className=\"divider\">/</span>{ maxPoints }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Spinner from '../Spinner/Spinner'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\nimport { formatDate } from '../../middleware/dateFormat'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nexport default class Profile extends Component {\r\n    state = {\r\n        user: null,\r\n        passedTests: [],\r\n        isLoading: true\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        fetch('/api/users/user', {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login';\r\n                }\r\n                console.log(res.passedTests);\r\n                \r\n                res.passedTests.reverse();\r\n\r\n                this.setState({\r\n                    user: res,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { user, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Hello, { user.name }!\r\n                </h1>\r\n                <h2>Your recent tests: </h2>\r\n                { user.passedTests.map(test => {\r\n                    console.log(test);\r\n                    const linkToTest = `/app/testInfo/${ test.testId }`\r\n\r\n                    return (\r\n                        <Link to={ linkToTest } key={ test._id } className=\"test-card\">\r\n                            <div className=\"test-card-left\">\r\n                                <h3>{ test.title }</h3>\r\n                                <h4>{ formatDate(test.date) }</h4>\r\n                            </div>\r\n                            <div className=\"test-card-right\">\r\n                                <PointsCard points={ test.points } maxPoints={ test.maxPoints } />\r\n                                <Link className=\"result-link\" to={ `/app/testResult/${ user._id }/${ test._id }` }>\r\n                                    View result\r\n                                </Link>\r\n                            </div>\r\n                        </Link>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { formatDate } from '../../middleware/dateFormat'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class Tests extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        tests: [],\r\n        isRedirectToLogin: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        fetch('/api/tests/allTests', {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login'\r\n                } else {\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        tests: res\r\n                    })\r\n                }\r\n                \r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, tests, isRedirectToLogin } = this.state;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Available tests: </h1>\r\n                { tests.map(test => {\r\n                    const linkToTest = `/app/testInfo/${ test._id }`\r\n\r\n                    return (\r\n                        <Link to={ linkToTest }>\r\n                            <div key={ test._id } className=\"test-card\">\r\n                                <div className=\"text-card-left\">\r\n                                    <h3 className=\"test-title\">{ test.title }</h3>\r\n                                    <h4 className=\"test-date\">Date: { formatDate(test.createdAt) }</h4>\r\n                                </div>\r\n                                <div className=\"test-card-right\">\r\n                                    <h3 className=\"test-subject\">Subject: <span className=\"subject\">{ test.subject }</span></h3>\r\n                                    <h3>Times passed: { test.results.length }</h3>\r\n                                </div>\r\n                            </div>\r\n                        </Link>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class TestInfo extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        testResults: null,\r\n        usernames: null,\r\n        errors: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        \r\n        fetch(`/api/tests/testInfo/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    isLoading: false,\r\n                    test: res\r\n                })\r\n            })\r\n        fetch(`/api/tests/testResults/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                res.testResults.sort((res1, res2) => {\r\n                    return res2.points - res1.points;\r\n                })\r\n                this.setState({\r\n                    isLoading: false,\r\n                    testResults: res.testResults,\r\n                    usernames: res.usernames\r\n                })\r\n            })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            currentAccessKey: e.target.innerText\r\n        })\r\n    }\r\n\r\n    goToTest() {\r\n        console.log(this.state.test);\r\n        \r\n        const { currentAccessKey } = this.state;\r\n        const { accessKey, _id, isProtected } = this.state.test;\r\n        if (accessKey === currentAccessKey || !isProtected) {\r\n            window.location.href = `/app/passTest/${ _id }`\r\n        } else {\r\n            let { errors } = this.state;\r\n            errors['keyError'] = 'Incorrect access key!';\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n        }\r\n    }   \r\n    \r\n    componentDidUpdate() {\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, testResults, errors } = this.state;\r\n\r\n        if (isLoading || test === null) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-top\">\r\n                    <Link to=\"/app/allTests\">\r\n                        <i className=\"fas fa-arrow-left\"></i> Back \r\n                    </Link>\r\n                </div>\r\n                <h1>{ test.title }</h1>\r\n                <p>{ test.description }</p>\r\n                { test.isProtected && (\r\n                    //return (\r\n                        <>\r\n                            <br/>\r\n                            <label htmlFor=\"title\">To start the test, you need to type in the secret key!</label> <br/>\r\n                            <span id=\"field\" className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } type=\"text\" name=\"title\"></span>\r\n                            <span className=\"error-input\">{ errors['keyError'] }</span>\r\n                        </>\r\n                    //)\r\n                    \r\n                 ) }\r\n                <br/>\r\n                {/* <Link class=\"btn btn-cta\" to={ `/app/passTest/${ test._id }` }>\r\n                    Pass test!\r\n                </Link> */}\r\n                <button onClick={ () => this.goToTest() } className=\"btn btn-cta\">Pass test!</button>\r\n                \r\n                \r\n                <div className=\"results\">\r\n                    <h3>Results: </h3>\r\n                    <table>\r\n                        <col className=\"username\" />\r\n                        <col className=\"points\" />\r\n                        <tr>\r\n                            <th>User</th>\r\n                            <th className=\"points\">Points</th>\r\n                        </tr>\r\n                        { testResults === null ? () => {\r\n                            return (\r\n                                <Spinner />\r\n                            )\r\n                        } : testResults.map(res => {                            \r\n                            return (\r\n                                <tr className='resultTr' key={ res.userId + res.points }>\r\n                                    <td>{ res.username }</td>\r\n                                    <td className=\"points\">\r\n                                        <PointsCard points={ res.points } maxPoints={ res.answers.length } />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }) }\r\n                    </table>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nexport default class CreateTest extends Component {\r\n    state = {\r\n        createdTests: [],\r\n        isLoading: true\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login';\r\n        fetch(`/api/tests/createdTests/${ this.context.userId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    createdTests: res,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const { createdTests, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Currently, you have { createdTests.length } created tests\r\n                </h1>\r\n                { createdTests.map(test => {\r\n                    const linkToTest = `/app/testInfo/${ test._id }`\r\n\r\n                    return (\r\n                        <Link to={ linkToTest }>\r\n                            <div key={ test._id } className=\"test-card\">\r\n                                <div className=\"text-card-left\">\r\n                                    <h3 className=\"test-title\">{ test.title }</h3>\r\n                                    <h4 className=\"test-date\">Date: { test.createdAt }</h4>\r\n                                </div>\r\n                                <div className=\"test-card-right\">\r\n                                    <h3 className=\"test-subject\">Subject: <span className=\"subject\">{ test.subject }</span></h3>\r\n                                    <h3>Times passed: { test.results.length }</h3>\r\n                                </div>\r\n                            </div>\r\n                        </Link>\r\n                    )\r\n                }) }\r\n                <Link to=\"/app/createTestForm\" className=\"btn btn-cta\">\r\n                    New test\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class TestResult extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        answers: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId;\r\n        const resultId = this.props.match.params.resultId;\r\n        \r\n        fetch(`/api/tests/testResult/${ userId }/${ resultId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers: res.answers,\r\n                    test: res.test\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { isLoading, test, answers } = this.state;\r\n        if (test) console.log(test.questions[0]);\r\n        console.log(answers);\r\n        \r\n        \r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-top\">\r\n                    <Link to=\"/app/\">\r\n                        <i className=\"fas fa-arrow-left\"></i> Back \r\n                    </Link>\r\n                </div>\r\n                <h1 className=\"heading\">\r\n                    Test result for \"{ test.title }\"\r\n                </h1>\r\n                <div className=\"result-table\">\r\n                    <table>\r\n                        <col className=\"main\" />\r\n                        { answers.map(ans => {\r\n                            return (\r\n                                <col className=\"answer\" />\r\n                            )\r\n                        }) }\r\n                        <tr className=\"first\">\r\n                            <th className=\"first main\">Question No.</th>\r\n                            { answers.map((ans, inx) => {\r\n                                return (\r\n                                    <th className=\"first ans\">{ inx + 1 }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"main\">Result: </th>\r\n                            { answers.map((ans, inx) => {\r\n                                let extraClassName = '';\r\n                                console.log(toString(ans));\r\n                                \r\n                                let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                                \r\n                                if (parseInt(ans) === parseInt(test.questions[inx].correctAnswerId)) \r\n                                    extraClassName = 'correct';\r\n                                else \r\n                                    extraClassName = 'wrong'\r\n                                return (\r\n                                    <th className={ `answerr ans ${ extraClassName }` }>{ isCorrect ? (<i className=\"far fa-check-circle\"></i> ) : (<i className=\"far fa-times-circle\"></i>) }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                { answers.map((ans, inx) => {\r\n                    let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                    let extraClassName = '';\r\n                    if (!isCorrect) extraClassName = 'wrong';\r\n                    let question = test.questions[inx];\r\n                    console.log(question.answers[parseInt(question.correctAnswerId)]);\r\n                    \r\n                    return (\r\n                        <div className=\"question-ans\">\r\n                            <h3>{ inx + 1 }. { question.title }</h3>\r\n                            <span className={ \"ans-text \" + extraClassName}>\r\n                                Your answer: { ans }) { question.answers[ans - 1].text }\r\n                            </span>\r\n                            <span className=\"ans-text\">\r\n                                Correct answer: { question.correctAnswerId }) { question.answers[parseInt(question.correctAnswerId) - 1].text }\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class CreateTestForm extends Component {\r\n    state = {\r\n        questions: [{\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }],\r\n        title: '',\r\n        description: '',\r\n        subject: '',\r\n        isProtected: false,\r\n        accessKey: '',\r\n        creator: this.context.userId\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    handleAddAnswer(quesId) {\r\n        const { questions } = this.state;        \r\n        let len = questions[quesId].answers.length;\r\n        console.log(len.toString());\r\n        \r\n        if (questions[quesId].answers.length === 6) return;\r\n        questions[quesId].answers.push({\r\n            text: '',\r\n            answerId: (len + 1).toString()\r\n        })\r\n        console.log(questions[quesId].answers);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddQuestion() {\r\n        const { questions } = this.state;\r\n        if (questions.length === 20) return;\r\n        questions.push({\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }) \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setQuestionTitle(e, index) {\r\n        let { questions } = this.state;\r\n        questions[index].title = e.target.innerText;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        });\r\n    }\r\n\r\n    setAnswerText(e, index, inx) {\r\n        console.log(e.target.innerText);\r\n        \r\n        let { questions } = this.state;\r\n        console.log(questions[index].answers, inx);\r\n        questions[index].answers[inx].text = e.target.innerText;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setTestTitle(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            title: e.target.innerText\r\n        })\r\n    }\r\n\r\n    setTestDescription(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            description: e.target.innerText\r\n        })\r\n    }\r\n\r\n    setTestSubject(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            subject: e.target.innerText\r\n        }, () => console.log(this.state.subject))\r\n    }\r\n\r\n    setProtectedState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isProtected: !this.state.isProtected,\r\n            accessKey: ''\r\n        })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            accessKey: e.target.innerText\r\n        })\r\n    }\r\n\r\n    setCorrectAnswerId(quesIndex, ansId) {\r\n        let { questions } = this.state;\r\n        questions[quesIndex].correctAnswerId = ansId;\r\n        console.log(ansId);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddTest() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login'\r\n        \r\n        fetch('/api/tests/createTest', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                window.location.href = '/app/allTests'\r\n            })\r\n    }\r\n\r\n    deleteAnswer(quesId, ansId) {\r\n        let { questions } = this.state;\r\n        if (questions[quesId].answers.length <= 2) return;\r\n\r\n        let inx = parseInt(ansId);\r\n        let corrAnswer = questions[quesId].correctAnswerId;\r\n        if (corrAnswer.toString() === (ansId + 1).toString()) {\r\n            if (ansId === 0) {\r\n                questions[quesId].correctAnswerId = '1';\r\n            } else {\r\n                console.log('fff');\r\n                \r\n                questions[quesId].correctAnswerId = (ansId).toString();\r\n            }\r\n        } \r\n        for (let i = inx; i < questions[quesId].answers.length; i++) {\r\n            questions[quesId].answers[i].answerId = (parseInt(questions[quesId].answers[i].answerId) - 1).toString();\r\n            if (i !== inx)\r\n                document.getElementById(`_${ quesId }-${ i - 1 }`).innerText = questions[quesId].answers[i].text;\r\n        }  \r\n        console.log(ansId);\r\n        \r\n        questions[quesId].answers.splice(ansId, 1);\r\n\r\n        console.log(questions[quesId].answers);\r\n        \r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    deleteQuestion(quesId) {\r\n        let { questions } = this.state;\r\n        if (questions.length === 1) return;\r\n        \r\n        questions.splice(quesId, 1);\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { questions, isProtected } = this.state;\r\n\r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Create test \r\n                </h1>\r\n                <div className=\"test-basic-info\">\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"title\">Test name: </label>\r\n                        <span className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setTestTitle(e) } type=\"text\" name=\"title\"> </span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"subject\">Subject: </label>\r\n                        <span className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setTestSubject(e) } type=\"text\" name=\"subject\"> </span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea className=\"\" onChange={ (e) => this.setTestDescription(e) } name=\"description\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\r\n                    </div>\r\n                    <div className=\"info-group-checkbox\">\r\n                        <input onChange={ this.setProtectedState.bind(this) } type=\"checkbox\" name=\"isProtected\" />\r\n                        <label htmlFor=\"isProtected\" name=\"isProtected\">Protected</label>\r\n                    </div>\r\n                    { isProtected && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Secret key: </label>\r\n                            <span class=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } name=\"key\" > </span>\r\n                        </div>\r\n                    ) }\r\n                    \r\n                </div>\r\n                <div className=\"questions\">\r\n                    { questions.map((ques, index) => {\r\n                        return (\r\n                            <div className=\"question-card\">\r\n                                <button onClick={ () => this.deleteQuestion(index) } className=\"btn-delete\"><span>&times;</span></button>\r\n                                <label className=\"title\"><span>{ index + 1 }.</span> </label>\r\n                                <span className=\"input\" contenteditable=\"true\" type=\"text\" onInput={ (e) => this.setQuestionTitle(e, index) } >Title</span>\r\n                                <div className=\"answers\">\r\n                                    { ques.answers.map((ans, inx) => {\r\n                                        return (\r\n                                            <div className=\"ans-card\">\r\n                                                <button onClick={ () => this.deleteAnswer(index, inx) } className=\"btn-delete\"><span>&times;</span></button>\r\n                                                <input type=\"radio\" id={ `${index}-${inx}` } name={ index } title=\"Mark as correct\" onChange={ () => this.setCorrectAnswerId(index, ans.answerId) } checked={ ques.correctAnswerId === ans.answerId } />\r\n                                                <label htmlFor={ `${index}-${inx}` }></label>\r\n                                                <span className=\"ans-letter\">{ letters[inx] }) </span>\r\n                                                <span id={ `_${ index }-${ inx }` } className=\"input\" contenteditable=\"true\" onInput={ (e) => this.setAnswerText(e, index, inx) } type=\"text\"></span>\r\n                                                \r\n                                                \r\n                                            </div>\r\n                                        )\r\n                                    }) }\r\n                                    <button onClick={ this.handleAddAnswer.bind(this, index) } className=\"add-question\"><span>+</span></button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                    <button onClick={ this.handleAddQuestion.bind(this) } className=\"new-question btn-secondary\">\r\n                        New question\r\n                    </button>\r\n                </div>\r\n                <button onClick={ this.handleAddTest.bind(this) } className=\"btn btn-cta\">Create test!</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PassTest extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: [],\r\n        answers: [],\r\n        answeredQuestions: 0,\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n        fetch(`/api/tests/testInfo/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    isLoading: false,\r\n                    test: res\r\n                })\r\n            })\r\n    }\r\n\r\n    handleSelect(index, answerId) {\r\n        console.log(index, answerId);\r\n        let { answers, answeredQuestions } = this.state;\r\n        if (typeof(answers[index]) === 'undefined') {\r\n            answeredQuestions++;\r\n        }\r\n        answers[index] = answerId;\r\n        this.setState({\r\n            ...this.state,\r\n            answers,\r\n            answeredQuestions\r\n        }, () => console.log(this.state) )\r\n    }\r\n\r\n    finishTest(e) {\r\n        e.preventDefault();\r\n        let points = 0;\r\n        let results = [];\r\n        const { answers, test } = this.state;\r\n        test.questions.map((ques, index) => {\r\n            if (ques.correctAnswerId === answers[index]) {\r\n                points++;\r\n                results.push(true);\r\n            } else {\r\n                results.push(false);\r\n            }\r\n            return ques;\r\n        })\r\n        const query = {\r\n            \"userId\": this.context.userId,\r\n            \"points\": points,\r\n            \"answers\": results,\r\n            \"title\": test.title,\r\n            \"maxPoints\": test.questions.length,\r\n            \"date\": Date.now(),\r\n            \"answersLetters\": answers\r\n        }\r\n        fetch(`/api/tests/saveResult/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(query)\r\n        })\r\n            .then(() => {\r\n                console.log('result saved!');\r\n                window.location.href = `/app/testInfo/${ test._id }`\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test } = this.state;\r\n        const { questions } = test;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <form className=\"test-form\" onSubmit={ e => this.finishTest(e) }>\r\n                <h1 className=\"heading\">\r\n                    Pass test '{ test.title }'\r\n                </h1>\r\n                <div className=\"test-questions\">\r\n                    { questions.map((ques, index) => {\r\n                        return (\r\n                            <div className=\"question-card\">\r\n                                <h3 className=\"question-title\">\r\n                                    { index + 1 }.  { ques.title }\r\n                                </h3>\r\n                                <div className=\"answers\">\r\n                                    { ques.answers.map(ans => {\r\n                                        return (\r\n                                            <div className=\"answer\">\r\n                                                <input onChange={ this.handleSelect.bind(this, index, ans.answerId) } id={ ans._id } type=\"radio\" name={ index } />\r\n                                                <label htmlFor={ ans._id }>{ ans.text }</label>\r\n                                            </div>\r\n                                        )\r\n                                    }) }\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-cta\" value=\"Finish\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","const validate = (data) => {\r\n    let errors = [];\r\n    data.forEach(field => {\r\n        if (field.name === 'email') {\r\n            if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(field.value)) ) {\r\n                errors['email'] = 'Invalid email'\r\n            } \r\n        } \r\n        if (field.name === 'password') {\r\n            if (field.value.length < 6) {\r\n                errors['password'] = 'Password must be at least 6 characters'\r\n            }\r\n        }\r\n        if (field.name === 'fullName') {\r\n            if (field.value.trim().length <= 5) {\r\n                errors['fullName'] = 'Please enter a real full name'\r\n            }\r\n        }\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nexport {\r\n    validate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport AuthContext from '../../context/TestsContext'\r\n\r\nexport default class Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formEl = React.createRef();        \r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const psw = document.querySelector('#psw');\r\n        const email = document.querySelector('#email');\r\n        psw.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        email.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n        psw.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n    }\r\n\r\n    setCredential(e) {\r\n        console.log(e.target);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            [e.target.getAttribute('data-name')]: e.target.innerHTML\r\n        })\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password }\r\n        ];\r\n        let errors = validate(data);\r\n        console.log(errors['email']);\r\n        \r\n        if (errors['email'] || errors['password']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors\r\n            })\r\n        } else {\r\n            errors = [];\r\n            const query = {\r\n                email: this.state.email,\r\n                password: this.state.password\r\n            }\r\n            fetch('https://testing-app-easytest.herokuapp.com/api/users/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(query)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.success) {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    } else {\r\n                        if (res.doesUserExist) \r\n                            errors['password'] = 'Incorrect password';\r\n                        else \r\n                            errors['email'] = 'User does not exist!'\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors: errors\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        console.log(errors['email']);\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Log in</h1>\r\n                <form id=\"login-form\" onSubmit={ (e) => this.handleSubmit(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <span data-name=\"email\" onInput={ (e) => this.setCredential(e) } className=\"field\" contentEditable=\"true\" id=\"email\"></span>\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: </label>\r\n                        <span data-name=\"password\" onInput={ (e) => this.setCredential(e) } id=\"psw\" className=\"field with-input\" contentEditable=\"true\">\r\n                        </span>\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-cta\" value=\"Log in\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nexport default class Register extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        name: '',\r\n        errors: []\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const psw = document.querySelector('#password');\r\n        const psw1 = document.querySelector('#confirmPassword');\r\n        const email = document.querySelector('#email');\r\n        psw.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        psw1.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw1.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        email.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n        let fields = document.querySelectorAll('.field');\r\n        fields.forEach(field => {\r\n            field.addEventListener('keypress',function(e){ \r\n                if (e.which === 13) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n        }) \r\n        psw.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n         },false);\r\n        psw1.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n         },false);\r\n    }\r\n    \r\n\r\n    setCredential(e) {\r\n        this.setState({\r\n            [e.target.id]: e.target.innerHTML\r\n        });\r\n    }\r\n\r\n    registerUser(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password },\r\n            { name: 'fullName', value: this.state.name }\r\n        ];\r\n        let errors = validate(data);\r\n        if (this.state.password !== this.state.confirmPassword) {\r\n            errors['confirmPassword'] = 'Passwords do not match'\r\n        }\r\n        \r\n        if (errors['email'] || errors['password'] || errors['fullName'] || errors['confirmPassword']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors\r\n            })\r\n        } else {\r\n            const newUser = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name\r\n            };\r\n            if (this.state.confirmPassword !== newUser.password) {\r\n                return;\r\n            };\r\n            fetch('/api/users/addUser', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    \r\n                    if (res.notSuccess) {\r\n                        errors = [];\r\n                        errors['email'] = 'User with such email already exists';\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors\r\n                        })\r\n                    } else {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Register</h1>\r\n                <form onSubmit={ (e) => this.registerUser(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"email\"></span>\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Full name: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"name\"></span>\r\n                        <span className=\"error-input\">{ errors['fullName'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"password\"></span>\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Confirm password: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"confirmPassword\"></span>\r\n                        <span className=\"error-input\">{ errors['confirmPassword'] }</span>\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-cta\" value=\"Create account\" />\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport Navbar from './Navbar/Navbar'\r\n\r\nimport Profile from './Profile/Profile'\r\nimport Tests from './Tests/Tests'\r\nimport TestInfo from './Tests/TestInfo'\r\nimport CreateTest from './CreateTest/CreateTest'\r\nimport TestResult from './TestResult/TestResult'\r\nimport CreateTestForm from './CreateTest/CreateTestForm'\r\nimport PassTest from './PassTest/PassTest'\r\nimport Login from './Auth/Login'\r\nimport Register from './Auth/Register'\r\n\r\nimport './css/MainPage.css'\r\nimport './css/GlobalStyles/style.css'\r\n\r\nexport default class MainPage extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className=\"app-container\">\r\n                    <Navbar />\r\n                    <main>\r\n                        <Switch>\r\n                            <Route exact path='/app/' component={ Profile } /> \r\n                            <Route path='/app/allTests' component={ Tests } /> \r\n                            <Route path='/app/testInfo/:testId' component={ TestInfo } /> \r\n                            <Route path='/app/testResult/:userId/:resultId' component={ TestResult } /> \r\n                            <Route path='/app/createTest' component={ CreateTest } /> \r\n                            <Route path='/app/createTestForm' component={ CreateTestForm } /> \r\n                            <Route path='/app/passTest/:testId' component={ PassTest } /> \r\n                            <Route path='/app/login' component={ Login } /> \r\n                            <Route path='/app/register' component={ Register } /> \r\n                        </Switch>\r\n                    </main>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ls from 'local-storage'\r\n\r\nimport TestsContext from './context/TestsContext'\r\n\r\nimport LandingPage from './landingPage/LandingPage';\r\nimport MainPage from './components/MainPage';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        userId: ls.get('userId'),\r\n        token: ls.get('token')\r\n    }\r\n\r\n    setToken = (token, userId) => {\r\n        this.setState({\r\n            token: token,\r\n            userId: userId\r\n        })\r\n        ls.set('token', token);\r\n        ls.set('userId', userId);\r\n    }\r\n\r\n    logout = () => {\r\n        this.setState({\r\n            token: '',\r\n            userId: ''\r\n        });\r\n        ls.set('token', '');\r\n        ls.set('userId', '');\r\n    }\r\n\r\n    render() {\r\n        const { token, userId } = this.state;\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <React.Fragment>\r\n                    <TestsContext.Provider value={{ token, userId, setToken: this.setToken, logout: this.logout  }}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={ LandingPage } />\r\n                            <Route path=\"/app\" component={ MainPage } />\r\n                        </Switch>\r\n                    </TestsContext.Provider>\r\n                </React.Fragment>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}