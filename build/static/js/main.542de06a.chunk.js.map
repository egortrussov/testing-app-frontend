{"version":3,"sources":["landingPage/img/logo.svg","landingPage/img/hero.svg","context/TestsContext.js","landingPage/LandingPage.js","components/Navbar/Navbar.js","components/Spinner/Spinner.js","middleware/authMiddleware.js","middleware/dateFormat.js","components/reusableComponents/PointsCard.js","components/Profile/Profile.js","components/Tests/Tests.js","components/Tests/TestInfo.js","components/CreateTest/CreateTest.js","components/TestResult/TestResult.js","components/CreateTest/CreateTestForm.js","components/PassTest/PassTest.js","middleware/validator.js","components/Auth/Login.js","components/Auth/Register.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","createContext","tests","title","LandingPage","className","src","Logo","alt","to","Hero","Component","Navbar","state","isLoggedIn","this","context","logout","window","location","href","process","token","ls","get","console","log","exact","onClick","bind","contextType","TestsContext","Spinner","getHeaders","formatDate","date1","date","Date","day","getDate","monthIndex","getMonth","year","getFullYear","PointsCard","props","points","maxPoints","result","extraClassName","Profile","user","passedTests","isLoading","fetch","proxy","headers","then","res","json","isTokenError","reverse","setState","name","map","test","linkToTest","testId","key","_id","Tests","isRedirectToLogin","createdAt","subject","results","length","TestInfo","testResults","usernames","errors","match","params","field","document","querySelector","addEventListener","e","which","preventDefault","sort","res1","res2","currentAccessKey","target","innerText","accessKey","isProtected","description","htmlFor","id","contenteditable","onInput","setAccessKey","type","goToTest","userId","username","answers","CreateTest","createdTests","TestResult","resultId","questions","ans","inx","toString","isCorrect","correctAnswerId","parseInt","question","text","CreateTestForm","answerId","creator","quesId","len","push","index","value","quesIndex","ansId","method","body","JSON","stringify","i","getElementById","splice","letters","setTestTitle","setTestSubject","onChange","setTestDescription","cols","rows","setProtectedState","class","ques","deleteQuestion","setQuestionTitle","deleteAnswer","setCorrectAnswerId","checked","setAnswerText","handleAddAnswer","handleAddQuestion","handleAddTest","PassTest","answeredQuestions","query","now","onSubmit","finishTest","handleSelect","validate","data","forEach","trim","Login","email","password","formEl","createRef","psw","keyCode","getAttribute","innerHTML","success","setToken","doesUserExist","handleSubmit","data-name","setCredential","contentEditable","AuthContext","Register","confirmPassword","psw1","querySelectorAll","newUser","notSuccess","registerUser","MainPage","path","component","App","set","basename","Fragment","Provider","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.542de06a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d86e2199.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.de877d3a.svg\";","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    tests: [{ title: 'hello' }]\r\n})\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Logo from './img/logo.svg'\r\nimport Hero from './img/hero.svg'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                {/* <div className=\"bg-circle-lg bg-circle\"></div> */}\r\n                <div className=\"bg-circle-md bg-circle\"></div>\r\n                <div className=\"bg-circle-dm bg-circle\"></div>\r\n                <div className=\"nav\">\r\n                    <div className=\"nav-left\">\r\n                        <img src={ Logo } alt=\"\" />\r\n                        <h1>EasyTest</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero\">\r\n                    <div className=\"hero-left\">\r\n                        <h1>Get your experience in online testing to a whole new level!</h1>\r\n                        <Link className=\"cta\" to=\"/app/\">Try it out!</Link>\r\n                    </div>\r\n                    <div className=\"hero-right\">\r\n                        <img src={ Hero } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    &copy; 2020 Yegor Trussov\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport ls from 'local-storage'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        isLoggedIn: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    // componentDidMount() {\r\n    //     let value = this.context;\r\n    //     console.log(value.token !== '');\r\n        \r\n    //     if (value.token !== '') {\r\n    //         this.setState({\r\n    //             isLoggedIn: true\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    logout() {\r\n        this.context.logout();\r\n        window.location.href = process.env.PUBLIC_URL + '/app/login'\r\n    }\r\n\r\n    render() {\r\n        const token = ls.get('token');\r\n        console.log(token);\r\n        \r\n        let isLoggedIn = token !== '';\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"nav-item nav-top\">\r\n                    <h2 className=\"logo\">EasyTest</h2>\r\n                </div>\r\n                <div className=\"nav-item nav-middle\">\r\n                    <NavLink exact className=\"nav-link\" to={process.env.PUBLIC_URL+\"/app/\"}><i className=\"fas fa-home\"></i> Home</NavLink>\r\n                    <NavLink className=\"nav-link\" to={process.env.PUBLIC_URL+\"/app/allTests\"}><i className=\"fas fa-align-left\"></i> Tests</NavLink>\r\n                    <NavLink className=\"nav-link\" to={process.env.PUBLIC_URL+\"/app/createTest\"}><i className=\"fas fa-pen-alt\"></i> Create Test</NavLink>\r\n                </div>\r\n                <div className=\"nav-item nav-bottom\">\r\n                    { !isLoggedIn && (\r\n                        <>\r\n                            <NavLink className=\"nav-link\" to={process.env.PUBLIC_URL+\"/app/login\"}>Login</NavLink>\r\n                            <NavLink className=\"nav-link\" to={process.env.PUBLIC_URL+\"/app/register\"}>Register</NavLink>\r\n                        </>\r\n                    ) }\r\n                    { isLoggedIn && (\r\n                        <button className=\"nav-link\" onClick={ this.logout.bind(this) } >Logout</button>\r\n                    ) }                    \r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\n\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"loader-wrapper\">\r\n            <div className=\"loader\"></div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Spinner","import ls from 'local-storage'\r\n\r\nconst getHeaders = () => {\r\n    return {\r\n        'x-auth-token': ls.get('token')\r\n    }\r\n}\r\n\r\nexport {\r\n    getHeaders\r\n}","const formatDate = date1 => {\r\n    let date = new Date(date1);\r\n    let monthNames = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ];\r\n\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    return day + ' ' + monthNames[monthIndex] + ' ' + year;\r\n};\r\n\r\nexport {\r\n    formatDate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PointsCard extends Component {\r\n    render() {\r\n        const { points, maxPoints } = this.props;\r\n\r\n        let result = points / maxPoints;\r\n        let extraClassName = '';\r\n\r\n        if (result >= .85)\r\n            extraClassName = 'excellent';\r\n        else if (result >= .65)\r\n            extraClassName = 'good';\r\n        else if (result >= .40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `points-card ${ extraClassName }` }>\r\n                { points }<span className=\"divider\">/</span>{ maxPoints }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Spinner from '../Spinner/Spinner'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\nimport { formatDate } from '../../middleware/dateFormat'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nexport default class Profile extends Component {\r\n    state = {\r\n        user: null,\r\n        passedTests: [],\r\n        isLoading: true\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        fetch(`${ this.context.proxy }/api/users/user`, {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login';\r\n                }\r\n                console.log(res.passedTests);\r\n                \r\n                res.passedTests.reverse();\r\n\r\n                this.setState({\r\n                    user: res,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { user, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Hello, { user.name }!\r\n                </h1>\r\n                <h2>Your recent tests: </h2>\r\n                { user.passedTests.map(test => {\r\n                    console.log(test);\r\n                    const linkToTest = `/app/testInfo/${ test.testId }`\r\n\r\n                    return (\r\n                        <Link to={ linkToTest } key={ test._id } className=\"test-card\">\r\n                            <div className=\"test-card-left\">\r\n                                <h3>{ test.title }</h3>\r\n                                <h4>{ formatDate(test.date) }</h4>\r\n                            </div>\r\n                            <div className=\"test-card-right\">\r\n                                <PointsCard points={ test.points } maxPoints={ test.maxPoints } />\r\n                                <Link className=\"result-link\" to={ `/app/testResult/${ user._id }/${ test._id }` }>\r\n                                    View result\r\n                                </Link>\r\n                            </div>\r\n                        </Link>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { formatDate } from '../../middleware/dateFormat'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class Tests extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        tests: [],\r\n        isRedirectToLogin: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        console.log(this.context);\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/allTests`, {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login'\r\n                } else {\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        tests: res\r\n                    })\r\n                }\r\n                \r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, tests, isRedirectToLogin } = this.state;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Available tests: </h1>\r\n                { tests.map(test => {\r\n                    const linkToTest = `/app/testInfo/${ test._id }`\r\n\r\n                    return (\r\n                        <Link to={ linkToTest }>\r\n                            <div key={ test._id } className=\"test-card\">\r\n                                <div className=\"text-card-left\">\r\n                                    <h3 className=\"test-title\">{ test.title }</h3>\r\n                                    <h4 className=\"test-date\">Date: { formatDate(test.createdAt) }</h4>\r\n                                </div>\r\n                                <div className=\"test-card-right\">\r\n                                    <h3 className=\"test-subject\">Subject: <span className=\"subject\">{ test.subject }</span></h3>\r\n                                    <h3>Times passed: { test.results.length }</h3>\r\n                                </div>\r\n                            </div>\r\n                        </Link>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\n\r\nimport './css/style.css'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nexport default class TestInfo extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        testResults: null,\r\n        usernames: null,\r\n        errors: []\r\n    };\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field !== null && field) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    isLoading: false,\r\n                    test: res\r\n                })\r\n            })\r\n        fetch(`${ this.context.proxy }/api/tests/testResults/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                res.testResults.sort((res1, res2) => {\r\n                    return res2.points - res1.points;\r\n                })\r\n                this.setState({\r\n                    isLoading: false,\r\n                    testResults: res.testResults,\r\n                    usernames: res.usernames\r\n                })\r\n            })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            currentAccessKey: e.target.innerText\r\n        })\r\n    }\r\n\r\n    goToTest() {\r\n        console.log(this.state.test);\r\n        \r\n        const { currentAccessKey } = this.state;\r\n        const { accessKey, _id, isProtected } = this.state.test;\r\n        if (accessKey === currentAccessKey || !isProtected) {\r\n            window.location.href = `/app/passTest/${ _id }`\r\n        } else {\r\n            let { errors } = this.state;\r\n            errors['keyError'] = 'Incorrect access key!';\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n        }\r\n    }   \r\n    \r\n    componentDidUpdate() {\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field && field !== null) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, testResults, errors } = this.state;\r\n        console.log(test);\r\n        \r\n\r\n        if (isLoading || test === null) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-top\">\r\n                    <Link to=\"/app/allTests\">\r\n                        <i className=\"fas fa-arrow-left\"></i> Back \r\n                    </Link>\r\n                </div>\r\n                <h1>{ test.title }</h1>\r\n                <p>{ test.description }</p>\r\n                { test.isProtected && (\r\n                    //return (\r\n                        <>\r\n                            <br/>\r\n                            <label htmlFor=\"title\">To start the test, you need to type in the secret key!</label> <br/>\r\n                            <span id=\"field\" className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } type=\"text\" name=\"title\"></span>\r\n                            <span className=\"error-input\">{ errors['keyError'] }</span>\r\n                        </>\r\n                    //)\r\n                    \r\n                 ) }\r\n                <br/>\r\n                {/* <Link class=\"btn btn-cta\" to={ `/app/passTest/${ test._id }` }>\r\n                    Pass test!\r\n                </Link> */}\r\n                <button onClick={ () => this.goToTest() } className=\"btn btn-cta\">Pass test!</button>\r\n                \r\n                \r\n                <div className=\"results\">\r\n                    <h3>Results: </h3>\r\n                    <table>\r\n                        <col className=\"username\" />\r\n                        <col className=\"points\" />\r\n                        <tr>\r\n                            <th>User</th>\r\n                            <th className=\"points\">Points</th>\r\n                        </tr>\r\n                        { testResults === null ? () => {\r\n                            return (\r\n                                <Spinner />\r\n                            )\r\n                        } : testResults.map(res => {                            \r\n                            return (\r\n                                <tr className='resultTr' key={ res.userId + res.points }>\r\n                                    <td>{ res.username }</td>\r\n                                    <td className=\"points\">\r\n                                        <PointsCard points={ res.points } maxPoints={ res.answers.length } />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }) }\r\n                    </table>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nexport default class CreateTest extends Component {\r\n    state = {\r\n        createdTests: [],\r\n        isLoading: true\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login';\r\n        fetch(`${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    createdTests: res,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const { createdTests, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Currently, you have { createdTests.length } created tests\r\n                </h1>\r\n                { createdTests.map(test => {\r\n                    const linkToTest = `/app/testInfo/${ test._id }`\r\n\r\n                    return (\r\n                        <Link to={ linkToTest }>\r\n                            <div key={ test._id } className=\"test-card\">\r\n                                <div className=\"text-card-left\">\r\n                                    <h3 className=\"test-title\">{ test.title }</h3>\r\n                                    <h4 className=\"test-date\">Date: { test.createdAt }</h4>\r\n                                </div>\r\n                                <div className=\"test-card-right\">\r\n                                    <h3 className=\"test-subject\">Subject: <span className=\"subject\">{ test.subject }</span></h3>\r\n                                    <h3>Times passed: { test.results.length }</h3>\r\n                                </div>\r\n                            </div>\r\n                        </Link>\r\n                    )\r\n                }) }\r\n                <Link to=\"/app/createTestForm\" className=\"btn btn-cta\">\r\n                    New test\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nexport default class TestResult extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        answers: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId;\r\n        const resultId = this.props.match.params.resultId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testResult/${ userId }/${ resultId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers: res.answers,\r\n                    test: res.test\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { isLoading, test, answers } = this.state;\r\n        if (test) console.log(test.questions[0]);\r\n        console.log(answers);\r\n        \r\n        \r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-top\">\r\n                    <Link to=\"/app/\">\r\n                        <i className=\"fas fa-arrow-left\"></i> Back \r\n                    </Link>\r\n                </div>\r\n                <h1 className=\"heading\">\r\n                    Test result for \"{ test.title }\"\r\n                </h1>\r\n                <div className=\"result-table\">\r\n                    <table>\r\n                        <col className=\"main\" />\r\n                        { answers.map(ans => {\r\n                            return (\r\n                                <col className=\"answer\" />\r\n                            )\r\n                        }) }\r\n                        <tr className=\"first\">\r\n                            <th className=\"first main\">Question No.</th>\r\n                            { answers.map((ans, inx) => {\r\n                                return (\r\n                                    <th className=\"first ans\">{ inx + 1 }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"main\">Result: </th>\r\n                            { answers.map((ans, inx) => {\r\n                                let extraClassName = '';\r\n                                console.log(toString(ans));\r\n                                \r\n                                let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                                \r\n                                if (parseInt(ans) === parseInt(test.questions[inx].correctAnswerId)) \r\n                                    extraClassName = 'correct';\r\n                                else \r\n                                    extraClassName = 'wrong'\r\n                                return (\r\n                                    <th className={ `answerr ans ${ extraClassName }` }>{ isCorrect ? (<i className=\"far fa-check-circle\"></i> ) : (<i className=\"far fa-times-circle\"></i>) }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                { answers.map((ans, inx) => {\r\n                    let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                    let extraClassName = '';\r\n                    if (!isCorrect) extraClassName = 'wrong';\r\n                    let question = test.questions[inx];\r\n                    console.log(question.answers[parseInt(question.correctAnswerId)]);\r\n                    \r\n                    return (\r\n                        <div className=\"question-ans\">\r\n                            <h3>{ inx + 1 }. { question.title }</h3>\r\n                            <span className={ \"ans-text \" + extraClassName}>\r\n                                Your answer: { ans }) { question.answers[ans - 1].text }\r\n                            </span>\r\n                            <span className=\"ans-text\">\r\n                                Correct answer: { question.correctAnswerId }) { question.answers[parseInt(question.correctAnswerId) - 1].text }\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class CreateTestForm extends Component {\r\n    state = {\r\n        questions: [{\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }],\r\n        title: '',\r\n        description: '',\r\n        subject: '',\r\n        isProtected: false,\r\n        accessKey: '',\r\n        creator: this.context.userId\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    handleAddAnswer(quesId) {\r\n        const { questions } = this.state;        \r\n        let len = questions[quesId].answers.length;\r\n        console.log(len.toString());\r\n        \r\n        if (questions[quesId].answers.length === 6) return;\r\n        questions[quesId].answers.push({\r\n            text: '',\r\n            answerId: (len + 1).toString()\r\n        })\r\n        console.log(questions[quesId].answers);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddQuestion() {\r\n        const { questions } = this.state;\r\n        if (questions.length === 20) return;\r\n        questions.push({\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }) \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setQuestionTitle(e, index) {\r\n        let { questions } = this.state;\r\n        questions[index].title = e.target.innerText;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        });\r\n    }\r\n\r\n    setAnswerText(e, index, inx) {\r\n        console.log(e.target.innerText);\r\n        \r\n        let { questions } = this.state;\r\n        console.log(questions[index].answers, inx);\r\n        questions[index].answers[inx].text = e.target.innerText;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setTestTitle(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            title: e.target.innerText\r\n        })\r\n    }\r\n\r\n    setTestDescription(e) {        \r\n        this.setState({\r\n            ...this.state,\r\n            description: e.target.value\r\n        })\r\n    }\r\n\r\n    setTestSubject(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            subject: e.target.innerText\r\n        }, () => console.log(this.state.subject))\r\n    }\r\n\r\n    setProtectedState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isProtected: !this.state.isProtected,\r\n            accessKey: ''\r\n        })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            accessKey: e.target.innerText\r\n        })\r\n    }\r\n\r\n    setCorrectAnswerId(quesIndex, ansId) {\r\n        let { questions } = this.state;\r\n        questions[quesIndex].correctAnswerId = ansId;\r\n        console.log(ansId);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddTest() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login'\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/createTest`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                window.location.href = '/app/allTests'\r\n            })\r\n    }\r\n\r\n    deleteAnswer(quesId, ansId) {\r\n        let { questions } = this.state;\r\n        if (questions[quesId].answers.length <= 2) return;\r\n\r\n        let inx = parseInt(ansId);\r\n        let corrAnswer = questions[quesId].correctAnswerId;\r\n        if (corrAnswer.toString() === (ansId + 1).toString()) {\r\n            if (ansId === 0) {\r\n                questions[quesId].correctAnswerId = '1';\r\n            } else {\r\n                console.log('fff');\r\n                \r\n                questions[quesId].correctAnswerId = (ansId).toString();\r\n            }\r\n        } \r\n        for (let i = inx; i < questions[quesId].answers.length; i++) {\r\n            questions[quesId].answers[i].answerId = (parseInt(questions[quesId].answers[i].answerId) - 1).toString();\r\n            if (i !== inx)\r\n                document.getElementById(`_${ quesId }-${ i - 1 }`).innerText = questions[quesId].answers[i].text;\r\n        }  \r\n        console.log(ansId);\r\n        \r\n        questions[quesId].answers.splice(ansId, 1);\r\n\r\n        console.log(questions[quesId].answers);\r\n        \r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    deleteQuestion(quesId) {\r\n        let { questions } = this.state;\r\n        if (questions.length === 1) return;\r\n        \r\n        questions.splice(quesId, 1);\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { questions, isProtected } = this.state;\r\n\r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Create test \r\n                </h1>\r\n                <div className=\"test-basic-info\">\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"title\">Test name: </label>\r\n                        <span className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setTestTitle(e) } type=\"text\" name=\"title\"> </span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"subject\">Subject: </label>\r\n                        <span className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setTestSubject(e) } type=\"text\" name=\"subject\"> </span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea className=\"\" onChange={ (e) => this.setTestDescription(e) } name=\"description\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\r\n                    </div>\r\n                    <div className=\"info-group-checkbox\">\r\n                        <input onChange={ this.setProtectedState.bind(this) } type=\"checkbox\" name=\"isProtected\" />\r\n                        <label htmlFor=\"isProtected\" name=\"isProtected\">Protected</label>\r\n                    </div>\r\n                    { isProtected && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Secret key: </label>\r\n                            <span class=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } name=\"key\" > </span>\r\n                        </div>\r\n                    ) }\r\n                    \r\n                </div>\r\n                <div className=\"questions\">\r\n                    { questions.map((ques, index) => {\r\n                        return (\r\n                            <div className=\"question-card\">\r\n                                <button onClick={ () => this.deleteQuestion(index) } className=\"btn-delete\"><span>&times;</span></button>\r\n                                <label className=\"title\"><span>{ index + 1 }.</span> </label>\r\n                                <span className=\"input\" contenteditable=\"true\" type=\"text\" onInput={ (e) => this.setQuestionTitle(e, index) } >Title</span>\r\n                                <div className=\"answers\">\r\n                                    { ques.answers.map((ans, inx) => {\r\n                                        return (\r\n                                            <div className=\"ans-card\">\r\n                                                <button onClick={ () => this.deleteAnswer(index, inx) } className=\"btn-delete\"><span>&times;</span></button>\r\n                                                <input type=\"radio\" id={ `${index}-${inx}` } name={ index } title=\"Mark as correct\" onChange={ () => this.setCorrectAnswerId(index, ans.answerId) } checked={ ques.correctAnswerId === ans.answerId } />\r\n                                                <label htmlFor={ `${index}-${inx}` }></label>\r\n                                                <span className=\"ans-letter\">{ letters[inx] }) </span>\r\n                                                <span id={ `_${ index }-${ inx }` } className=\"input\" contenteditable=\"true\" onInput={ (e) => this.setAnswerText(e, index, inx) } type=\"text\"></span>\r\n                                                \r\n                                                \r\n                                            </div>\r\n                                        )\r\n                                    }) }\r\n                                    <button onClick={ this.handleAddAnswer.bind(this, index) } className=\"add-question\"><span>+</span></button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                    <button onClick={ this.handleAddQuestion.bind(this) } className=\"new-question btn-secondary\">\r\n                        New question\r\n                    </button>\r\n                </div>\r\n                <button onClick={ this.handleAddTest.bind(this) } className=\"btn btn-cta\">Create test!</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PassTest extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: [],\r\n        answers: [],\r\n        answeredQuestions: 0,\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    isLoading: false,\r\n                    test: res\r\n                })\r\n            })\r\n    }\r\n\r\n    handleSelect(index, answerId) {\r\n        console.log(index, answerId);\r\n        let { answers, answeredQuestions } = this.state;\r\n        if (typeof(answers[index]) === 'undefined') {\r\n            answeredQuestions++;\r\n        }\r\n        answers[index] = answerId;\r\n        this.setState({\r\n            ...this.state,\r\n            answers,\r\n            answeredQuestions\r\n        }, () => console.log(this.state) )\r\n    }\r\n\r\n    finishTest(e) {\r\n        e.preventDefault();\r\n        let points = 0;\r\n        let results = [];\r\n        const { answers, test } = this.state;\r\n        test.questions.map((ques, index) => {\r\n            if (ques.correctAnswerId === answers[index]) {\r\n                points++;\r\n                results.push(true);\r\n            } else {\r\n                results.push(false);\r\n            }\r\n            return ques;\r\n        })\r\n        const query = {\r\n            \"userId\": this.context.userId,\r\n            \"points\": points,\r\n            \"answers\": results,\r\n            \"title\": test.title,\r\n            \"maxPoints\": test.questions.length,\r\n            \"date\": Date.now(),\r\n            \"answersLetters\": answers\r\n        }\r\n        fetch(`${ this.context.proxy }/api/tests/saveResult/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(query)\r\n        })\r\n            .then(() => {\r\n                console.log('result saved!');\r\n                window.location.href = `/app/testInfo/${ test._id }`\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test } = this.state;\r\n        const { questions } = test;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <form className=\"test-form\" onSubmit={ e => this.finishTest(e) }>\r\n                <h1 className=\"heading\">\r\n                    Pass test '{ test.title }'\r\n                </h1>\r\n                <div className=\"test-questions\">\r\n                    { questions.map((ques, index) => {\r\n                        return (\r\n                            <div className=\"question-card\">\r\n                                <h3 className=\"question-title\">\r\n                                    { index + 1 }.  { ques.title }\r\n                                </h3>\r\n                                <div className=\"answers\">\r\n                                    { ques.answers.map(ans => {\r\n                                        return (\r\n                                            <div className=\"answer\">\r\n                                                <input onChange={ this.handleSelect.bind(this, index, ans.answerId) } id={ ans._id } type=\"radio\" name={ index } />\r\n                                                <label htmlFor={ ans._id }>{ ans.text }</label>\r\n                                            </div>\r\n                                        )\r\n                                    }) }\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-cta\" value=\"Finish\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","const validate = (data) => {\r\n    let errors = [];\r\n    data.forEach(field => {\r\n        if (field.name === 'email') {\r\n            if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(field.value)) ) {\r\n                errors['email'] = 'Invalid email'\r\n            } \r\n        } \r\n        if (field.name === 'password') {\r\n            if (field.value.length < 6) {\r\n                errors['password'] = 'Password must be at least 6 characters'\r\n            }\r\n        }\r\n        if (field.name === 'fullName') {\r\n            if (field.value.trim().length <= 5) {\r\n                errors['fullName'] = 'Please enter a real full name'\r\n            }\r\n        }\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nexport {\r\n    validate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport AuthContext from '../../context/TestsContext'\r\n\r\nexport default class Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formEl = React.createRef();        \r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const psw = document.querySelector('#psw');\r\n        const email = document.querySelector('#email');\r\n        psw.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        email.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n        psw.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n    }\r\n\r\n    setCredential(e) {\r\n        console.log(e.target);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            [e.target.getAttribute('data-name')]: e.target.innerHTML\r\n        })\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password }\r\n        ];\r\n        let errors = validate(data);\r\n        console.log(errors['email']);\r\n        \r\n        if (errors['email'] || errors['password']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors\r\n            })\r\n        } else {\r\n            errors = [];\r\n            const query = {\r\n                email: this.state.email,\r\n                password: this.state.password\r\n            }\r\n            fetch(`${ this.context.proxy }/api/users/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(query)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.success) {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    } else {\r\n                        if (res.doesUserExist) \r\n                            errors['password'] = 'Incorrect password';\r\n                        else \r\n                            errors['email'] = 'User does not exist!'\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors: errors\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        console.log(errors['email']);\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Log in</h1>\r\n                <form id=\"login-form\" onSubmit={ (e) => this.handleSubmit(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <span data-name=\"email\" onInput={ (e) => this.setCredential(e) } className=\"field\" contentEditable=\"true\" id=\"email\"></span>\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: </label>\r\n                        <span data-name=\"password\" onInput={ (e) => this.setCredential(e) } id=\"psw\" className=\"field with-input\" contentEditable=\"true\">\r\n                        </span>\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-cta\" value=\"Log in\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nexport default class Register extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        name: '',\r\n        errors: []\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const psw = document.querySelector('#password');\r\n        const psw1 = document.querySelector('#confirmPassword');\r\n        const email = document.querySelector('#email');\r\n        psw.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        psw1.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw1.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        email.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n        let fields = document.querySelectorAll('.field');\r\n        fields.forEach(field => {\r\n            field.addEventListener('keypress',function(e){ \r\n                if (e.which === 13) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n        }) \r\n        psw.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n         },false);\r\n        psw1.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n         },false);\r\n    }\r\n    \r\n\r\n    setCredential(e) {\r\n        this.setState({\r\n            [e.target.id]: e.target.innerHTML\r\n        });\r\n    }\r\n\r\n    registerUser(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password },\r\n            { name: 'fullName', value: this.state.name }\r\n        ];\r\n        let errors = validate(data);\r\n        if (this.state.password !== this.state.confirmPassword) {\r\n            errors['confirmPassword'] = 'Passwords do not match'\r\n        }\r\n        \r\n        if (errors['email'] || errors['password'] || errors['fullName'] || errors['confirmPassword']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors\r\n            })\r\n        } else {\r\n            const newUser = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name\r\n            };\r\n            if (this.state.confirmPassword !== newUser.password) {\r\n                return;\r\n            };\r\n            fetch(`${ this.context.proxy }/api/users/addUser`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    \r\n                    if (res.notSuccess) {\r\n                        errors = [];\r\n                        errors['email'] = 'User with such email already exists';\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors\r\n                        })\r\n                    } else {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Register</h1>\r\n                <form onSubmit={ (e) => this.registerUser(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"email\"></span>\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Full name: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"name\"></span>\r\n                        <span className=\"error-input\">{ errors['fullName'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"password\"></span>\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Confirm password: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"confirmPassword\"></span>\r\n                        <span className=\"error-input\">{ errors['confirmPassword'] }</span>\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-cta\" value=\"Create account\" />\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport Navbar from './Navbar/Navbar'\r\n\r\nimport Profile from './Profile/Profile'\r\nimport Tests from './Tests/Tests'\r\nimport TestInfo from './Tests/TestInfo'\r\nimport CreateTest from './CreateTest/CreateTest'\r\nimport TestResult from './TestResult/TestResult'\r\nimport CreateTestForm from './CreateTest/CreateTestForm'\r\nimport PassTest from './PassTest/PassTest'\r\nimport Login from './Auth/Login'\r\nimport Register from './Auth/Register'\r\n\r\nimport './css/MainPage.css'\r\nimport './css/GlobalStyles/style.css'\r\n\r\nexport default class MainPage extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className=\"app-container\">\r\n                    <Navbar />\r\n                    <main>\r\n                        <Switch>\r\n                            <Route exact path='/app/' component={ Profile } /> \r\n                            <Route path='/app/allTests' component={ Tests } /> \r\n                            <Route path='/app/testInfo/:testId' component={ TestInfo } /> \r\n                            <Route path='/app/testResult/:userId/:resultId' component={ TestResult } /> \r\n                            <Route path='/app/createTest' component={ CreateTest } /> \r\n                            <Route path='/app/createTestForm' component={ CreateTestForm } /> \r\n                            <Route path='/app/passTest/:testId' component={ PassTest } /> \r\n                            <Route path='/app/login' component={ Login } /> \r\n                            <Route path='/app/register' component={ Register } /> \r\n                        </Switch>\r\n                    </main>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ls from 'local-storage'\r\n\r\nimport TestsContext from './context/TestsContext'\r\n\r\nimport LandingPage from './landingPage/LandingPage';\r\nimport MainPage from './components/MainPage';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        userId: ls.get('userId'),\r\n        token: ls.get('token'),\r\n        proxy: process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : 'https://testing-app-easytest.herokuapp.com'\r\n    }\r\n\r\n    setToken = (token, userId) => {\r\n        this.setState({\r\n            token: token,\r\n            userId: userId\r\n        })\r\n        ls.set('token', token);\r\n        ls.set('userId', userId);\r\n    }\r\n\r\n    logout = () => {\r\n        this.setState({\r\n            token: '',\r\n            userId: ''\r\n        });\r\n        ls.set('token', '');\r\n        ls.set('userId', '');\r\n    }\r\n\r\n    render() {\r\n        const { token, userId, proxy } = this.state;\r\n        console.log(process.env);\r\n        \r\n\r\n        return (\r\n            <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n                <React.Fragment>\r\n                    <TestsContext.Provider value={{ token, userId, setToken: this.setToken, logout: this.logout, proxy  }}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={ LandingPage } />\r\n                            <Route path=\"/app\" component={ MainPage } />\r\n                        </Switch>\r\n                    </TestsContext.Provider>\r\n                </React.Fragment>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}